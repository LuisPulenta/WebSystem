@page "/users/createuser"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Crear Usuario</h3>

<UserForm @ref="userForm" UserDTO="userDTO" OnValidSubmit="Create" ReturnAction="Return" />

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string type { get; set; } = "";

    private UserDTO userDTO = new();
    
    protected override void OnInitialized()
    {
        userDTO.FirstName = "";
        userDTO.LastName = "";
        userDTO.Email = "";
        userDTO.Password = "";
        userDTO.Password2 = "";
        userDTO.Password2Confirm = "";
        userDTO.IsAdmin = false;
        userDTO.IsConfirm = false;
        userDTO.Token = "";
    }

    private UserForm? userForm;

    private async Task Create()
    {
       if (type == "admin")
        {
            userDTO.IsAdmin = true;
        }
        else
        {
            userDTO.IsAdmin = false;
        }

        var httpResponse = await repository.Post("/api/users", userDTO);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        userForm!.FormPostedSuccessfully = true;
        await sweetAlertService.FireAsync("Confirmación", "La cuenta ha sido creada con éxito. Se ha enviado un correo electrónico con las instrucciones para activar el usuario.", SweetAlertIcon.Info);
        navigationManager.NavigateTo("/users");
    }

    private void Return()
    {
        navigationManager.NavigateTo("/users");
    }
}