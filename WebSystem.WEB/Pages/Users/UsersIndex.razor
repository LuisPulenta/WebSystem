@page "/users"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService


<h3>Administradores y Usuarios</h3>

<a class="btn btn-primary mb-3" href="/users/createuser?type=admin">Nuevo Administrador</a>
<a class="btn btn-primary mb-3" href="/users/createuser?type=user">Nuevo Usuario</a>


<GenericList MyList="Users">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Usuario</th>
                    <th>Email</th>
                    <th>Admin</th>
                    <th>Confirmado</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Users!)
                {
                    <tr>
                        <td>
                            @user.FullName
                        </td>
                        <td>
                            @user.Email
                        </td>
                        <td>
                            <input type="checkbox" onclick="return false" @bind="@user.IsAdmin">
                        </td>
                        <td>
                            <input type="checkbox" onclick="return false" @bind="@user.IsConfirm">
                        </td>
                        <td>
                            <a href="/users/edit/@user.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(user.Id))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>


@code {
    public List<User>? Users { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<List<User>>("/api/users");
        Users = responseHttp.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/users/{id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessage();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        await LoadAsync();
    }

}