@page "/users/edit/{Id:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService swal

<h3>Editar Usuario</h3>

@if (user is null)
{
    <p>Cargando...</p>
}
else
{
    <UserForm @ref="userForm" User="user" OnValidSubmit="EditAsync" ReturnAction="Return" />
}


@code {
    private User? user;
    private UserForm? userForm;


    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<User>($"/api/users/{Id}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("users");
                return;
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessage();
                await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
                return;
            }

        }
        user = responseHTTP.Response;
    }

    private async Task EditAsync()
    {
        var responseHTTP = await repository.Put("/api/users", user);
        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }
        userForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/users");
    }

    private void Return()
    {
        userForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/users");
    }
}
